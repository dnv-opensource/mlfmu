name: Push to release
run-name: Push to release by @${{ github.actor }}

on:
  workflow_dispatch:

concurrency:
  group: push-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  # notify if someone is trying to run this from any other branch than `release`
  check_release_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure on release branch
        run: |
          if [ "${GITHUB_REF##*/}" != "release" ]; then
            echo "This workflow must be run on the release branch."
            exit 1
          fi
  # code quality tests
  code_quality:
    uses: ./.github/workflows/_code_quality.yml
  # run tests
  test:
    uses: ./.github/workflows/_test.yml
  # create github tag
  create_tag:
    runs-on: ubuntu-latest
    needs: [code_quality, test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^current_version' pyproject.toml | head -1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Create tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
            exit 0
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  # build and publish documentation
  build_and_publish_documentation:
    needs: create_tag
    uses: ./.github/workflows/_build_and_publish_documentation.yml

  # build the package artifacts
  build_package:
    needs: build_and_publish_documentation
    uses: ./.github/workflows/_build_package.yml

  # publish to pypi
  publish_package:
    name: Publish package
    needs: [build_package]
    runs-on: ubuntu-latest
    environment: release
    permissions:
        id-token: write
    steps:
        - uses: actions/download-artifact@v4
          with:
            name: artifact
            path: dist
        - uses: pypa/gh-action-pypi-publish@release/v1
          # Uncomment the next 2 lines to publish to testpypi
          # (note; this requires a trusted publisher on test.pypi.org, this is different from pypi.org)
          # with:
            #  repository-url: https://test.pypi.org/legacy/

  create_release:
    name: Create GitHub Release
    needs: [create_tag, publish_package]
    uses: ./.github/workflows/_create_github_release.yml
    with:
      version: ${{ needs.create_tag.outputs.version }}
